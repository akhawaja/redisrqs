{
  "version": 3,
  "file": "redisrqsTests.js",
  "sourceRoot": "..",
  "sources": [
    "test/redisrqsTests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "chai = require \"chai\"\nchai.should()\n\nassert = chai.assert\nRedisRQS = require \"../redisrqs\"\n\nqueue = new RedisRQS\n  redis:\n    port: 6379,\n    host: \"localhost\",\n    family: 4,\n    db: 15\n\n  redisrqs:\n    sweepInterval: 10000\n\ndescribe \"RedisRQS Tests:\", ->\n  after (done) ->\n    queue.drainQueues().then -> done()\n    return\n\n  before  ->\n    queue.on \"redisrqs:enqueue\", ->\n      queue.getPendingQueueSize()\n        .then (count) ->\n          count.should.equal 1\n\n  it \"Should be a class of type RedisRQS\", (done) ->\n    assert.instanceOf queue, RedisRQS\n    done()\n\n  it \"Should contain identifiable queue names\", (done) ->\n    assert.equal \"redisrqs:pending\", queue.getQueueNames().pending\n    done()\n\n  it \"Working queue should be empty\", ->\n    queue.getWorkingQueueSize().then (result) -> result.should.equal(0)\n\n  it \"Pending queue should be empty\", ->\n    queue.getPendingQueueSize().then (result) -> result.should.equal(0)\n\n  it \"Values queue should be empty\", ->\n    queue.getValuesQueueSize().then (result) -> result.should.equal(0)\n\n  it \"Pending queue should contain a valid message when queued\", (done) ->\n    uuid = \"\"\n    obj =\n      topic: \"Test\",\n      data: \"This is a test message\"\n\n    message = JSON.stringify obj\n\n    queue.enqueue \"foo\", message\n      .then (result) ->\n        message = JSON.parse JSON.parse(result[1]).data\n        message.topic.should.equal obj.topic\n        message.data.should.equal obj.data\n      .then ->\n        queue.drainQueues().then -> done()\n      .catch (err) ->\n        done(err)\n\n    queue.once \"redisrqs:enqueue\", (result) ->\n      message = JSON.parse result.message\n      message.topic.should.equal obj.topic\n      message.data.should.equal obj.data\n\n    queue.once \"foo\", (result) ->\n      uuid = result.uuid\n      message = JSON.parse result.message\n      message.topic.should.equal obj.topic\n      message.data.should.equal obj.data\n\n  it \"Requeuing the message should result in a valid pending message\", (done) ->\n    uuid = \"\"\n    obj =\n      topic: \"Test2\",\n      data: \"This is a test message2\"\n\n    message = JSON.stringify obj\n\n    queue.enqueue \"foo2\", message\n      .then (result) ->\n        message = JSON.parse JSON.parse(result[1]).data\n        message.topic.should.equal obj.topic\n        message.data.should.equal obj.data\n      .then ->\n        queue.dequeue().then (result) ->\n          message = JSON.parse result.message\n          message.topic.should.equal obj.topic\n          message.data.should.equal obj.data\n      .catch (err) ->\n        done(err)\n\n    queue.once \"redisrqs:requeue\", (result) ->\n      uuid.should.equal result\n      queue.getPendingQueueSize()\n        .then (count) ->\n          count.should.equal 1\n          queue.drainQueues().then -> done()\n\n    queue.once \"redisrqs:dequeue\", (result) ->\n      message = JSON.parse result.message\n      message.data.should.equal obj.data\n      queue.requeue result.uuid\n\n    queue.once \"foo2\", (result) ->\n      uuid = result.uuid\n      message = JSON.parse result.message\n      message.data.should.equal obj.data\n\n  it \"Sweep interval should be honored when creating a RedisRQS instance\", (done) ->\n    interval = 10000\n    queue.once \"redisrqs:sweep\", ->\n      queue.getSweepInterval().should.equal interval\n      done()\n"
  ]
}