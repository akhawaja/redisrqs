{
  "version": 3,
  "file": "redisrqs.js",
  "sourceRoot": "",
  "sources": [
    "redisrqs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "class RedisRQS\n  EventEmitter = require(\"events\").EventEmitter\n  Redis = require \"ioredis\"\n  async = require \"async\"\n\n  constructor: (options) ->\n    # Validate the options\n    if not options?\n      throw new Error \"Options are missing\"\n\n    if not options.redis?\n      throw new Error \"Redis connection options are missing\"\n\n    if not options.redisrqs?\n      throw new Error \"RedisRQS options are missing\"\n\n    if not options.redisrqs.sweepInterval?\n      # Default to 1-minute\n      options.redisrqs.sweepInterval = 60000\n\n    @_options = options;\n    @_ee = new EventEmitter();\n    @_moment = require(\"moment\");\n    @_uuid = require(\"uuid\");\n    @_queueNames =\n      working: \"redisrqs:working\"\n      pending: \"redisrqs:pending\"\n      values: \"redisrqs:values\"\n\n    @_queue = new Redis(@_options.redis);\n\n    @_queue.defineCommand \"enqueue\",\n      numberOfKeys: 1\n      lua: \"\"\"\n           redis.call(\"LPUSH\", \"#{@_queueNames.pending}\", KEYS[1])\n           redis.call(\"HSET\", \"#{@_queueNames.values}\", KEYS[1], ARGV[1])\n           return {KEYS[1], ARGV[1]}\n           \"\"\"\n\n    @_queue.defineCommand \"dequeue\",\n      numberOfKeys: 1\n      lua: \"\"\"\n           local uuid = redis.call(\"RPOP\", \"#{@_queueNames.pending}\")\n           if type(uuid) == \"boolean\" then\n             return nil\n           else\n             redis.call(\"ZADD\", \"#{@_queueNames.working}\", ARGV[1], uuid)\n               if redis.call(\"HEXISTS\", \"#{@_queueNames.values}\", uuid) == 1 then\n                 local payload = redis.call(\"HGET\", \"#{@_queueNames.values}\", uuid)\n                 return {uuid, payload}\n               else\n                 return nil\n               end\n           end\n           \"\"\"\n\n    @_queue.defineCommand \"release\",\n      numberOfKeys: 1\n      lua: \"\"\"\n           redis.call(\"ZREM\", \"#{@_queueNames.working}\", ARGV[1])\n           redis.call(\"HDEL\", \"#{@_queueNames.values}\", ARGV[1])\n           return ARGV[1]\n           \"\"\"\n\n    @_queue.defineCommand \"requeue\",\n      numberOfKeys: 1\n      lua: \"\"\"\n           redis.call(\"ZREM\", \"#{@_queueNames.working}\", ARGV[1])\n           redis.call(\"LPUSH\", \"#{@_queueNames.pending}\", ARGV[1])\n           return ARGV[1]\n           \"\"\"\n\n    @_queue.defineCommand \"sweep\",\n      numberOfKeys: 2\n      lua: \"\"\"\n           local uuids = redis.call(\"ZRANGEBYSCORE\", \"#{@_queueNames.working}\", 0, ARGV[1] - ARGV[2])\n           for _, key in ipairs(uuids) do\n             redis.call(\"LPUSH\", \"#{@_queueNames.pending}\", key)\n             redis.call(\"ZREM\", \"#{@_queueNames.working}\", key)\n           end\n           \"\"\"\n\n    # Set the sweep command to execute every interval\n    setInterval @_sweepFunc.bind(@), options.sweepInterval\n\n    async.forever @dequeue.bind(@), (err) ->\n      throw new Error err\n\n  _newUUID: ->\n    @_uuid.v4();\n\n  _sweepFunc: ->\n    self = @\n    @_queue.sweep \"timestamp\", \"interval\", @_moment.utc().valueOf(), @getSweepInterval()\n      .then ->\n        self._ee.emit \"redisrqs:sweep\", new Date()\n\n  getSweepInterval: ->\n    @_options.redisrqs.sweepInterval\n\n  getQueueNames: ->\n    @_queueNames\n\n  enqueue: (topic, message) ->\n    if typeof topic isnt \"string\"\n      throw new Error \"enqueue: topic must be a string\"\n\n    if typeof message isnt \"string\"\n      throw new Error \"enqueue: message must be a string or a stringified JSON object\"\n\n    uuid = @_newUUID();\n    payload = JSON.stringify \"topic\": topic, \"data\": message\n    self = @\n\n    new Promise (resolve, reject) ->\n      self._queue.enqueue uuid, payload\n        .then (result) ->\n          if result?\n            uuid = result[0]\n            payload = JSON.parse result[1]\n            d =\n              \"uuid\": uuid\n              \"message\": payload.data\n\n            self._ee.emit \"redisrqs:enqueue\", d\n            resolve result\n\n        .catch (err) ->\n          reject \"enqueue: Could not queue the message! #{err}\"\n\n  dequeue: ->\n    self = @\n\n    new Promise (resolve, reject) ->\n      self._queue.dequeue \"timestamp\", self._moment.utc().valueOf()\n        .then (result) ->\n          if result?\n            uuid = result[0]\n            payload = JSON.parse result[1]\n            d =\n              \"uuid\": uuid\n              \"message\": payload.data\n            self._ee.emit \"redisrqs:dequeue\", d\n            self._ee.emit payload.topic, d\n\n            resolve d\n\n        .catch (err) ->\n          reject \"dequeue: Unable to get the next message. #{err}\"\n\n  release: (uuid) ->\n    self = @\n\n    new Promise (resolve, reject) ->\n      self._queue.release \"uuid\", uuid\n        .then (result) ->\n          if result?\n            self._ee.emit \"redisrqs:release\", result\n            resolve result\n\n        .catch (err) ->\n          reject \"release: Unable to remove the message. #{err}\"\n\n  requeue: (uuid) ->\n    self = @\n\n    new Promise (resolve, reject) ->\n      self._queue.requeue(\"uuid\", uuid)\n        .then (result) ->\n          if result?\n            self._ee.emit \"redisrqs:requeue\", result\n            resolve result\n\n        .catch (err) ->\n          reject \"requeue: Unable to requeue the message. #{err}\"\n\n  getWorkingQueueSize: ->\n    self = @\n    new Promise (resolve, reject) ->\n        resolve self._queue.zcount self._queueNames.working, \"-inf\", \"+inf\"\n\n  getPendingQueueSize: ->\n    self = @\n    new Promise (resolve, reject) ->\n      resolve self._queue.llen self._queueNames.pending\n\n  getValuesQueueSize: ->\n    self = @\n    new Promise (resolve, reject) ->\n      resolve self._queue.hlen self._queueNames.values\n\n  drainQueues: ->\n    self = @\n\n    new Promise (resolve, reject) ->\n      callbacks = [\n        (next) ->\n          self._queue.del(self._queueNames.pending).then -> next()\n\n        (next) ->\n          self._queue.del(self._queueNames.working).then -> next()\n\n        (next) ->\n          self._queue.del(self._queueNames.values).then -> next()\n      ]\n      async.parallel callbacks, (err, result) ->\n        if err?\n          reject err\n\n        self._ee.emit \"redisrqs:drainQueues\", new Date()\n        resolve result\n\n  on: (evt, callback) ->\n    if typeof evt isnt \"string\"\n      throw new Error \"event name must be of type string\"\n\n    if typeof callback isnt \"function\"\n      throw new Error \"callback must be of type function\"\n\n    @_ee.on(evt, callback);\n\n  once: (evt, callback) ->\n    if typeof evt isnt \"string\"\n      throw new Error \"event name must be of type string\"\n\n    if typeof callback isnt \"function\"\n      throw new Error \"callback must be of type function\"\n\n    @_ee.once(evt, callback);\n\nmodule.exports = RedisRQS\n"
  ]
}